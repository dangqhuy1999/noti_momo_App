package com.example.loamomo

import android.service.notification.NotificationListenerService
import android.service.notification.StatusBarNotification
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.util.Log
import androidx.annotation.RequiresPermission
import org.json.JSONArray
import org.json.JSONObject
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.util.*

class MyNotificationListener : NotificationListenerService() {
    private val notificationsArray = JSONArray()
    private lateinit var bluetoothAdapter: BluetoothAdapter
    // üí° CHANGE 1: Make bluetoothSocket nullable (add '?') and initialize to null/remove lateinit
    private var bluetoothSocket: BluetoothSocket? = null

    // üí° CHANGE 2: Make connectedThread nullable (add '?') and initialize to null/remove lateinit
    private var connectedThread: ConnectedThread? = null

    private companion object {
        //com.android.chrome
        //com.mservice.momotransfer
        //com.skype.raider
        //private const val MOMO_PACKAGE_NAME = "com.skype.raider"
        //private val MY_UUID: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")
        // UUID m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ƒë·ªçc ƒë∆∞·ª£c t·ª´ config
        private val DEFAULT_UUID: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

    }

    @RequiresPermission(value = "android.permission.BLUETOOTH_CONNECT")
    override fun onCreate() {
        super.onCreate()

        // ƒê·ªçc c·∫•u h√¨nh t·ª´ SharedPreferences
        val sharedPrefs = applicationContext.getSharedPreferences("AppConfig", MODE_PRIVATE)
        val macAddress = sharedPrefs.getString("bluetooth_mac", null)
        val uuidString = sharedPrefs.getString("bluetooth_uuid", null)

        // Ch·ªâ k·∫øt n·ªëi n·∫øu c√≥ MAC Address
        if (macAddress.isNullOrEmpty()) {
            Log.e("BluetoothConnection", "MAC Address not configured. Skipping Bluetooth connection.")
            return
        }

        val targetUUID = try {
            UUID.fromString(uuidString ?: DEFAULT_UUID.toString())
        } catch (e: IllegalArgumentException) {
            Log.e("BluetoothConnection", "Invalid UUID format: $uuidString. Using default UUID.", e)
            DEFAULT_UUID
        }

        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()
        if (bluetoothAdapter == null || !bluetoothAdapter.isEnabled) {
            Log.e("BluetoothConnection", "Bluetooth not supported or not enabled.")
            return
        }

        val device: BluetoothDevice = bluetoothAdapter.getRemoteDevice(macAddress)

        try {
            // ƒê√≥ng socket c≈© n·∫øu c√≥
            bluetoothSocket?.close()
            bluetoothSocket = device.createRfcommSocketToServiceRecord(targetUUID)
            bluetoothSocket?.connect()

            Log.i("BluetoothConnection", "Connected to device: $macAddress with UUID: $targetUUID")

            // B·∫Øt ƒë·∫ßu lu·ªìng giao ti·∫øp
            connectedThread = ConnectedThread(bluetoothSocket!!)
            connectedThread?.start()

        } catch (e: IOException) {
            Log.e("BluetoothConnection", "Unable to connect: ${e.message}", e)
            // ƒê·∫£m b·∫£o socket ƒë∆∞·ª£c ƒë√≥ng n·∫øu k·∫øt n·ªëi th·∫•t b·∫°i
            try { bluetoothSocket?.close() } catch (closeException: IOException) {}
            bluetoothSocket = null
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        // ƒê√≥ng k·∫øt n·ªëi khi service b·ªã h·ªßy
        try { bluetoothSocket?.close() } catch (e: IOException) { Log.e("BluetoothConnection", "Error closing socket: ${e.message}") }
    }
    fun convertToNoAccent(input: String): String {
        val accents = mapOf(
            '√°' to 'a', '√†' to 'a', '·∫£' to 'a', '√£' to 'a', '·∫°' to 'a',
            '·∫•' to 'a', '·∫ß' to 'a', '·∫©' to 'a', '·∫´' to 'a', '·∫≠' to 'a',
            '·∫Ø' to 'a', '·∫±' to 'a', '·∫≥' to 'a', '·∫µ' to 'a', '·∫∑' to 'a',
            '√©' to 'e', '√®' to 'e', '·∫ª' to 'e', '·∫Ω' to 'e', '·ªá' to 'e',
            '√™' to 'e', '·∫ø' to 'e', '·ªÅ' to 'e', '·ªÉ' to 'e', '·ªÖ' to 'e',
            '√≠' to 'i', '√¨' to 'i', '·ªâ' to 'i', 'ƒ©' to 'i', '·ªã' to 'i',
            '√≥' to 'o', '√≤' to 'o', '·ªè' to 'o', '√µ' to 'o', '·ªç' to 'o',
            '·ªë' to 'o', '·ªì' to 'o', '·ªï' to 'o', '·ªó' to 'o', '·ªô' to 'o',
            '·ªõ' to 'o', '·ªù' to 'o', '·ªü' to 'o', '·ª°' to 'o', '·ª£' to 'o',
            '√∫' to 'u', '√π' to 'u', '·ªß' to 'u', '≈©' to 'u', '·ª•' to 'u',
            '√Ω' to 'y', '·ª≥' to 'y', '·ª∑' to 'y', '·ªπ' to 'y', '·ªµ' to 'y',
            'ƒê' to 'D', 'ƒë' to 'd', '√Å' to 'A', '√Ä' to 'A', '·∫¢' to 'A', '√É' to 'A', '·∫†' to 'A',
            '·∫§' to 'A', '·∫¶' to 'A', '·∫®' to 'A', '·∫™' to 'A', '·∫¨' to 'A',
            '·∫Æ' to 'A', '·∫∞' to 'A', '·∫≤' to 'A', '·∫¥' to 'A', '·∫∂' to 'A',
            '√â' to 'E', '√à' to 'E', '·∫∫' to 'E', '·∫º' to 'E', '·ªÜ' to 'E',
            '√ä' to 'E', '·∫æ' to 'E', '·ªÄ' to 'E', '·ªÇ' to 'E', '·ªÑ' to 'E',
            '√ç' to 'I', '√å' to 'I', '·ªà' to 'I', 'ƒ®' to 'I', '·ªä' to 'I',
            '√ì' to 'O', '√í' to 'O', '·ªé' to 'O', '√ï' to 'O', '·ªå' to 'O',
            '·ªê' to 'O', '·ªí' to 'O', '·ªî' to 'O', '·ªñ' to 'O', '·ªò' to 'O',
            '·ªö' to 'O', '·ªú' to 'O', '·ªû' to 'O', '·ª†' to 'O', '·ª¢' to 'O',
            '√ö' to 'U', '√ô' to 'U', '·ª¶' to 'U', '≈®' to 'U', '·ª§' to 'U',
            '√ù' to 'Y', '·ª≤' to 'Y', '·ª∂' to 'Y', '·ª∏' to 'Y', '·ª¥' to 'Y'
        )
        return input.map { accents[it] ?: it }.joinToString("")
    }

    override fun onNotificationPosted(sbn: StatusBarNotification) {
        // ƒê·ªçc package name t·ª´ SharedPreferences
        val sharedPrefs = applicationContext.getSharedPreferences("AppConfig", MODE_PRIVATE)
        val packageNameFilter = sharedPrefs.getString("notification_package", "com.mservice.momotransfer")

        if (sbn.packageName == packageNameFilter) {
            // ... (Ph·∫ßn x·ª≠ l√Ω th√¥ng b√°o gi·ªØ nguy√™n)
            val notificationObject = JSONObject()
            try {
                val extras = sbn.notification.extras
                notificationObject.put("packageName", sbn.packageName)
                notificationObject.put("title", extras.getString("android.title"))

                val text = extras.getString("android.text") ?: extras.getString("android.bigText") ?: "No Text"
                notificationObject.put("text", convertToNoAccent(text))

                notificationsArray.put(notificationObject)
                // writeToFile(notificationsArray.toString()) // T√πy ch·ªçn: ghi file c√≥ th·ªÉ l√†m ch·∫≠m

                val output = convertToNoAccent(text)
                Log.d("MoMoNotification", "Parsed and sending: $output")

                // G·ª≠i d·ªØ li·ªáu qua Bluetooth
                sendData(output)
            } catch (e: Exception) {
                Log.e("NotificationReader", "Error creating JSON", e)
            }
        }
    }

    private fun sendData(data: String) {
        // Thay ƒë·ªïi ::connectedThread.isInitialized th√†nh connectedThread != null
        if (connectedThread != null) {
            try {
                connectedThread?.write(data.toByteArray())
            } catch (e: Exception) {
                Log.e("BluetoothSend", "Error writing data after connection: ${e.message}", e)
            }
        } else {
            Log.e("BluetoothSend", "Error: ConnectedThread not ready. Bluetooth connection might be lost or failed in onCreate.")
        }
    }
    private fun writeToFile(data: String) {
        val file = File(getExternalFilesDir(null), "notifications.json")
        try {
            FileOutputStream(file, true).use { fos ->  // Append mode
                fos.write(data.toByteArray())
                fos.write('\n'.code) // Optional: Add a newline for each entry
            }
        } catch (e: IOException) {
            Log.e("NotificationReader", "Error writing to file", e)
        }
    }
    private inner class ConnectedThread(socket: BluetoothSocket) : Thread() {
        private val inputStream: InputStream = socket.inputStream
        private val outputStream: OutputStream = socket.outputStream
        private fun writeToFile(data: String) {
            val file = File(getExternalFilesDir(null), "notifications.txt")
            try {
                FileOutputStream(file, true).use { fos ->  // Append mode
                    fos.write(data.toByteArray())
                    fos.write('\n'.code) // Optional: Add a newline for each entry
                }
            } catch (e: IOException) {
                Log.e("NotificationReader", "Error writing to file", e)
            }
        }
        fun write(bytes: ByteArray) {
            try {
                outputStream.write(bytes)
            } catch (e: IOException) {
                Log.e("BluetoothActivity", "Error sending data", e)
            }
        }
        override fun run() {
            val buffer = ByteArray(1024)
            var bytes: Int
            while (true) {
                try {
                    bytes = inputStream.read(buffer)
                    val receivedData = String(buffer, 0, bytes)
                    writeToFile(receivedData)
                    // X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n n·∫øu c·∫ßn
                } catch (e: IOException) {
                    Log.e("BluetoothActivity", "Connection lost", e)
                    break
                }
            }
        }
    }
}